<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="false">
	<description>spring 公共配置</description>
	
	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.lesaas" />
	
	<!-- 数据源配置，使用应用内的DBCP数据库连接池-->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName"
			value="${jdbc.connection.driver_class}" />
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />
	</bean>
	 
	
	
	<!-- Hibernate 配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- DataSource Define -->
		<property name="dataSource" ref="dataSource" />
		
		<property name="packagesToScan">
			<list>
				<value>com.lesaas.*</value>
			</list>
		</property>
		
		<!-- Mapping File Define  -->
		<property name="mappingResources">
			<list>
			</list>
		</property>
		<property name="hibernateProperties">
			<ref bean="hibernateProperties" />
		</property>
	</bean>
	
	<bean id="hibernateProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.transaction.factory_class">${hibernate.transaction.factory_class}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">${hibernate.jdbc.use_streams_for_binary}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.connection.release_model">${hibernate.connection.release_model}</prop>
			</props>
		</property>
	</bean>
	
	<!-- Spring JDBCTemplate配置 -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="jdbcTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<!-- 事务管理器配置，单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<bean id="hibernateLazyResolver"
		class="com.letech.core.hibernate.HibernateLazyResolver">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean> 
		
	<!-- ################################################################# -->
	<!--             事务拦截器的定义 （Service Bean Define）                    -->
	<!-- ################################################################# -->	
	
	<bean id="hibernateTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="quit*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="transfer*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="do*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="approve*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="post*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	
	<bean id="jdbcTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="jdbcTransactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-Exception</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	
	 
</beans>